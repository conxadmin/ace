# Export WS
echo "### Downloading repository..."
src_ws = (cw)
exportDestinationPath = ($src_ws expw)

# Import WS
echo "### Uploading repository..."
src_index = (repo:index ${exportDestinationPath}/jars_and_configs)
sourcerepo = (repo:repo R5 $src_index)


# Import WS: install resource processor & get OBR url
echo "### Uploading repository: prepare to install RP..."
workspace = (cw4imp)
rpRepoPath = ($workspace getResourceProceRepoPath)
rp_repo_index = (repo:index ${rpRepoPath})
rpRepo = (repo:repo R5 $rp_repo_index)
targetRepoUrl = $workspace getObrUrl
targetRepo = (repo:repo OBR ${targetRepoUrl}/index.xml)
$workspace commit


# Import WS: copy to OBR
echo "### Uploading repository: copy source OBR to target OBR..."
repo:cp $sourcerepo $targetRepo "(&(osgi.identity=*)(type=*))"
artifacts = repo:ls $targetRepo

# Install RP
echo "### Uploading repository: install RP..."
repo:cp $rpRepo $targetRepo "(&(osgi.identity=*)(type=*))"
rpArtifacts = (repo:ls $rpRepo)
workspace = (cw4imp)
each $rpArtifacts {identity = $it getIdentity; version = $it getVersion; name = "$identity - $version"; url = $it getUrl; mimetype = $it getMimetype; if { (coll:first ($workspace la "(artifactName=$name)")) } { } { $workspace ca [ artifactName="$name" url="$url" mimetype="$mimetype" Bundle-SymbolicName="$identity" Bundle-Version="$version" Deployment-ProvidesResourceProcessor="org.osgi.deployment.rp.autoconf"]; echo "Created RP bundle $name" } }
$workspace commit


# Import WS: Import bundles
echo "### Uploading repository: upload bundle artifacts..."
workspace = (cw4imp)
each $artifacts {identity = $it getIdentity; version = $it getVersion; name = "$identity - $version"; url = $it getUrl; mimetype = $it getMimetype; if { (coll:first ($workspace la "(artifactName=$name)")) } { } { if { $mimetype equals "application/xml:osgi-autoconf" } { $workspace ca [ artifactName="$name" url="$url" mimetype="$mimetype" filename="$name" processorPid="org.osgi.deployment.rp.autoconf" ]; echo "Created autoconf $name" } { $workspace ca [ artifactName="$name" url="$url" mimetype="$mimetype" Bundle-SymbolicName="$identity" Bundle-Version="$version" ]; echo "Created bundle $name" }} }
#$workspace ca [ artifactName="${autoConfBundleSymbolicName} - ${autoConfBundleVersion}" url="${autoConfBundleURL}" mimetype="application/vnd.osgi.bundle" Bundle-SymbolicName="${autoConfBundleSymbolicName}" Bundle-Version="${autoConfBundleVersion}" ]
$workspace commit


# Import WS: Import Auto Confs
echo "### Uploading repository: upload autoconf artifacts..."
workspace = (cw4imp)
artifacts = repo:ls $targetRepo "(type=file)"
each $artifacts {identity = $it getIdentity; version = $it getVersion; name = "$identity - $version"; url = $it getUrl; mimetype = $it getMimetype; if { (coll:first ($workspace la "(artifactName=$name)")) } { } { if { $mimetype equals "application/xml:osgi-autoconf" } { $workspace ca [ artifactName="$name" url="$url" mimetype="$mimetype" filename="$name" processorPid="org.osgi.deployment.rp.autoconf" ]; echo "Created autoconf $name" } { $workspace ca [ artifactName="$name" url="$url" mimetype="$mimetype" Bundle-SymbolicName="$identity" Bundle-Version="$version" ]; echo "Created bundle $name" }} }
$workspace commit

echo "### Uploading repository: upload target xml's..."
workspace = (cw4imp)
targets = ($workspace lsTargetFiles ${exportDestinationPath})
$workspace commit
each $targets { workspace = (cw4imp); fileName = $it; echo $fileName; $workspace impw ${exportDestinationPath} $fileName false; $workspace commit; $workspace cleanTempDirectory}

# Create targets from xml files
workspace = (cw4imp)
$workspace cts
$workspace commit

misc:shutdown 0